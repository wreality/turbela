type PublicPlan {
    id: ID!
    name: String!
}

type Plan {
    id: ID!
    name: String!
    public: Boolean!
    features: [Feature!] @belongsToMany
    stripe_id: String
    stripe_data: StripeProductData
}

type StripeProductData {
    id: String
    name: String
    livemode: Boolean
    prices: [StripeProductPriceData!]
}

type StripeProductPriceData {
    id: String!
    nickname: String
    unit_amount: Int
    currency: String
    recurring: StripePriceRecurringData
}

type StripePriceRecurringData {
    interval: String!
    interval_count: Int!
}

extend type Query {
    getFeatures: [Feature!]! @can(ability: "index") @all
    getPlan(id: ID! @eq): Plan @can(ability: "update") @find
    getPlans: [Plan!]! @paginate(defaultCount: 10) @can(ability: "index")
    getPublicPlans: [PublicPlan!]!
        @paginate(defaultCount: 10, model: "Plan", scopes: ["public"])
    getAvailableStripeProducts: [AvailableStripeProducts!]!
        @can(ability: "update", model: "App\\Models\\Plan")
}

type AvailableStripeProducts {
    id: String!
    name: String!
}

extend type Mutation {
    createPlan(input: CreatePlan @spread): Plan! @create @can(ability: "create")
    updatePlan(input: UpdatePlan @spread): Plan! @update @can(ability: "update")
    createFeature(input: CreateFeature @spread): Feature!
        @create
        @can(ability: "create")
    updateFeature(input: UpdateFeature @spread): Feature!
        @update
        @can(ability: "update")
}

input CreatePlan {
    name: String!
    public: Boolean
}

input UpdateFeaturesBelongsToMany {
    sync: [SyncFeatures!]
    disconnect: [ID!]
    syncWithoutDetaching: [SyncFeatures!]
    connect: [SyncFeatures!]
}

input SyncFeatures {
    id: ID!
    amount: Int
}

input UpdatePlan {
    id: ID!
    name: String
    public: Boolean
    stripe_id: String
    features: UpdateFeaturesBelongsToMany
}

type Feature {
    id: ID!
    name: String!
    slug: String
    type: FeatureType!
    parameters: FeatureParameters
}

type FeatureParameters {
    amount: Int
}

enum FeatureType {
    GRANT @enum(value: 1)
    LIMIT @enum(value: 2)
    TRACK @enum(value: 3)
}

input CreateFeature {
    name: String!
    type: FeatureType
}

input UpdateFeature {
    id: ID!
    name: String
    type: FeatureType
}
