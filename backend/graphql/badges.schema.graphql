type Badge {
    id: ID!
    name: String!
    created_at: DateTimeTz!
    updated_at: DateTimeTz!
    users(q: String @search): [User!]!
        @can(ability: "search", model: "App\\Models\\Badge")
        @paginate(
            defaultCount: 10
            resolver: "App\\Models\\Badge@paginateBadgeUsers"
        )
}
extend type User {
    completion: BadgeCompletion!
}

type UserBadge @model(class: "\\App\\Models\\Badge") {
    id: ID!
    name: String!
    created_at: DateTimeTz!
    updated_at: DateTimeTz!
    completion: BadgeCompletion
}
type BadgeCompletionAudit {
    id: ID!
    user: User
    event: String!
    created_at: DateTimeTz!
    new_values: BadgeCompletionAuditValues!
}

type BadgeCompletionAuditValues {
    completion: BadgeCompletion!
}
type BadgeCompletion @model(class: "\\App\\Models\\BadgeUser") {
    id: ID!
    created_at: DateTimeTz!
    updated_at: DateTimeTz!
    revoked: Boolean!
    instructor_id: ID
    instructor: User
    user: User
    badge: Badge
    notes: String
    audits: [BadgeCompletionAudit!]!
}

extend type Mutation {
    badge: BadgeMutations @field(resolver: "Namespaced")
}

type BadgeMutations {
    create(input: CreateBadgeInput @spread): Badge!
        @create
        @can(ability: "create")
    update(id: ID!, input: UpdateBadgeInput @spread): Badge!
        @update
        @can(ability: "edit")
    updateUserBadges(input: UpdateUserBadgesInput @spread): User!
        @can(ability: "assign-badge")
    updateBadgeUsers(input: UpdateBadgeUsersInput @spread): Badge!
        @can(ability: "assign-badge", model: "App\\Models\\User")
}

extend type Query {
    badge(id: ID! @eq): Badge @find
    badges(search: String @search): [Badge!]!
        @paginate(defaultCount: 10)
        @can(ability: "search")
    badgesCount: Int! @count(model: "Badge")
}

extend type User {
    badges(q: String @search): [UserBadge!]!
        @can(ability: "search", model: "App\\Models\\User")
        @paginate(
            defaultCount: 10
            resolver: "App\\Models\\User@paginateBadgeUsers"
        )
    badge(id: ID!): UserBadge @method
}

input CreateBadgeInput {
    name: String!
}

input UpdateBadgeInput {
    name: String
}

input UpdateBadgeUsersInput {
    """
    The badge to update
    """
    id: ID!
    grant: [AssignBadgeUserInput!]
}

input AssignBadgeUserInput {
    """
    The user to assign
    """
    user_id: ID!
    notes: String
    instructor_id: ID!
}

input UpdateUserBadgesInput {
    """
    The user to update
    """
    id: ID!
    grant: [UserBadgeInput!]
    revoke: [UserBadgeInput!]
}

input UserBadgeInput {
    """
    The badge to assign
    """
    badge_id: ID!
    notes: String
    instructor_id: ID!
}
