type Badge {
    id: ID!
    name: String!
    created_at: DateTimeTz!
    updated_at: DateTimeTz!
    users(q: String @search): [BadgeUser!]!
        @can(ability: "search", model: "App\\Models\\Badge")
        @paginate(
            defaultCount: 10
            resolver: "App\\Models\\Badge@paginateBadgeUsers"
        )
}
type BadgeUser @model(class: "\\App\\Models\\User") {
    id: ID!
    name: String!
    email: String!
    completion: BadgeCompletion!
}

type UserBadge {
    id: ID!
    name: String!
    created_at: DateTimeTz!
    updated_at: DateTimeTz!
    completion: BadgeCompletion
}

type BadgeCompletion {
    id: ID!
    created_at: DateTimeTz!
    instructor: User!
    notes: String
    updated_at: DateTimeTz!
}

extend type Mutation {
    createBadge(input: CreateBadgeInput @spread): Badge!
        @create
        @can(ability: "create")
    updateBadge(id: ID!, input: UpdateBadgeInput @spread): Badge!
        @update
        @can(ability: "edit")
    updateUserBadges(input: UpdateUserBadgesInput @spread): User!
        @can(ability: "assign-badge")
}

extend type Query {
    badge(id: ID! @eq): Badge @find
    badges(search: String @search): [Badge!]!
        @paginate(defaultCount: 10)
        @can(ability: "search")
    badgesCount: Int! @count(model: "Badge")
}

extend type User {
    badges: [UserBadge!]! @belongsToMany
}

input CreateBadgeInput {
    name: String!
}

input UpdateBadgeInput {
    name: String
}

input UpdateUserBadgesInput {
    """
    The user to update
    """
    id: ID!
    grant: [AssignUserBadgeInput!]
    revoke: [RevokeUserBadgeInput!]
}

input AssignUserBadgeInput {
    """
    The badge to assign
    """
    id: ID!
    notes: String
    instructor_id: ID!
}

input RevokeUserBadgeInput {
    """
    The badge to revoke
    """
    id: ID!
}
