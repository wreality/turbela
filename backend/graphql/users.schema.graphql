type User {
    id: ID!
    name: String!
    email: String!
    preferred_name: String
    phones: [Phones!]!
    address: Address
    created_at: DateTime!
    updated_at: DateTime!
    email_verified_at: DateTimeTz
    roles: [String!]! @method(name: "getRoles")
    abilities: [String!]! @method(name: "getAbilitiesArray")
    terminal_pincode: String
    avatar: Media
}

type Media {
    collection_name: String
    name: String
    file_name: String
    url: String @method(name: "getUrl")
    srcset: String @method(name: "getSrcset")
    mime_type: String
    size: Int
}
type Phones {
    number: String!
    type: String!
}

type Address {
    line1: String!
    line2: String
    city: String!
    state: String!
    postal_code: String!
}
type Role {
    title: String!
    name: String!
}

type Ability {
    title: String!
    name: String!
}

input AddressInput {
    line1: String!
    line2: String
    city: String!
    state: String!
    postal_code: String!
}

input PhonesInput {
    number: String!
    type: String!
}

input CreateUser {
    email: String!
    name: String!
    preferred_name: String
    address: AddressInput!
    phones: [PhonesInput!]!
}

extend type Mutation {
    login(email: String!, password: String!): User!
        @field(resolver: "App\\GraphQL\\Mutations\\Authenticate@login")

    logout: User
        @guard
        @field(resolver: "App\\GraphQL\\Mutations\\Authenticate@logout")

    createUser(input: CreateUser @spread): User! @create @can(ability: "create")
    updateUser(input: UserUpdate @spread): User! @update @can(ability: "update")
}

extend type Query {
    currentUser: User @auth
    userExists(email: String!): Boolean!
        @field(resolver: "App\\GraphQL\\Queries\\UserUtilities@userExists")
    users(scope: SearchUsersInput, search: String @scope): [User!]!
        @paginate(defaultCount: 10)
        @can(ability: "search")
    user(email: String @eq, id: ID @eq): User @find @can(ability: "view")
}

input SearchUsersInput

input UserUpdate {
    id: ID!
    name: String
    preferred_name: String
    address: AddressInput
    phone: [PhonesInput]
    avatar: Upload @uploadMedia(collection: "avatar")
}
