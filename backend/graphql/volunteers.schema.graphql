type Volunteer {
    id: ID!
    user: User
    created_at: DateTimeTz!
    updated_at: DateTimeTz!
    active: Boolean!
    current_hour: VolunteerHour @rename(attribute: "currentHour")
    hours(
        range: VolunteerHoursRangeInput
        scope: VolunteerHoursScopesInput
        orderBy: _ @orderBy(columns: ["start", "approved", "length"])
    ): [VolunteerHour!]! @hasMany(type: PAGINATOR)
    hour_tenths_available: Int!
    hour_tenths_redeemed: Int!
    hour_tenths_expired: Int!
    supervisor: Boolean
}

input VolunteerHoursRangeInput {
    start: DateTimeTz @where(operator: ">=")
    end: DateTimeTz @where(operator: "<=")
    approved: Boolean @scope
}

input VolunteerHoursScopesInput {
    approved: Boolean @scope
    final: Boolean @scope
}

type VolunteerHour {
    id: ID!
    start: DateTimeTz!
    end: DateTimeTz
    supervisor: User
    notes: String
    approved: Boolean!
    length: Int
}

extend type User {
    volunteer: Volunteer @hasOne
}

extend input SearchUsersInput {
    volunteer: VolunteerScopesInput
}

input VolunteerScopesInput {
    active: Boolean @scope(name: "activeVolunteer")
    punchedIn: Boolean @scope(name: "punchedInVolunteer")
    canActivate: Boolean @scope(name: "canActivateVolunteer")
}

extend type Query {
    punchedInVolunteers: Int!
        @count(model: "User", scopes: ["punchedInVolunteer"])
    activeVolunteers: Int!
        @count(model: "User", scopes: ["activeVolunteer"])
        @can(ability: "view", model: "App\\Models\\Volunteer")
    inactiveVolunteers: Int!
        @count(model: "User", scopes: ["inactiveVolunteer"])
        @can(ability: "view", model: "App\\Models\\Volunteer")
    volunteer(id: ID @eq): Volunteer @find @can(ability: "view")
    volunteer_hours(
        range: VolunteerHoursRangeInput
        scope: VolunteerHoursScopesInput
        orderBy: _ @orderBy(columns: ["start", "approved", "length"])
    ): [VolunteerHour!]! @paginate @can(ability: "view")
}

extend type Mutation {
    volunteer: VolunteerMutations @field(resolver: "Namespaced")
}

type VolunteerMutations {
    updateVolunteer(input: VolunteerUpdateInput! @spread): Volunteer!
        @can(ability: "update")
    punch(input: VolunteerPunchInput! @spread): VolunteerHour!
    updateTime(input: VolunteerUpdateTimeInput @spread): VolunteerHour!
        @can(ability: "update")
}

input VolunteerUpdateInput {
    id: ID!
    active: Boolean
}

input VolunteerPunchInput {
    id: ID!
    direction: PunchInOutDirection!
    notes: String
    supervisor_id: ID
}

input VolunteerUpdateTimeInput {
    id: ID!
    start: DateTimeTz
    end: DateTimeTz
    supervisor_id: ID
    notes: String
}

enum PunchInOutDirection {
    IN @enum(value: "in")
    OUT @enum(value: "out")
}
